{"ts":1357412197546,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php\n/*\n * test_oauth_client.php\n *\n * @(#) $Id: test_oauth_client.php,v 1.4 2012/10/05 09:22:40 mlemos Exp $\n *\n */\n\n\trequire('http.php');\n\trequire('oauth_client.php');\n\n\t/* Create the OAuth authentication client class */ \n\t$client = new oauth_client_class;\n\n\t/*\n\t * Set to true if you want to make the class dump\n\t * debug information to PHP error log\n\t */\n\t$client->debug = true;\n\n\t/*\n\t * Set to true if you want to make the class also dump\n\t * debug output of the HTTP requests it sends.\n\t */\n\t$client->debug_http = false;\n\n\t/* OAuth server type name\n\t * Setting this variable to one of the built-in supported OAuth servers\n\t * will make the class automatically set all parameters specific of that\n\t * type of server.\n\t * \n\t * Currently, built-in supported types are: Facebook, github, Google,\n\t * Microsoft, Foursquare, Twitter and Yahoo.\n\t * \n\t * Send e-mail to mlemos at acm.org if you would like the class to have\n\t * built-in support to access other OAuth servers.\n\t * \n\t * Set to an empty string to use another type of OAuth server. Check the\n\t * documentation to learn how to set other parameters to configure the\n\t * class to access that server\n\t */\n\t$client->server = '';\n\n\t/* OAuth authentication URL identifier\n\t * This should be the current page URL without any request parameters\n\t * used by OAuth, like state and code, error, denied, etc..\n\t */\n\t$client->redirect_uri = 'http://'.$_SERVER['HTTP_HOST'].\n\t\tdirname(strtok($_SERVER['REQUEST_URI'],'?')).'/test_oauth_client.php';\n\n\t/* OAuth client identifier\n\t * Set this to values defined by the OAuth server for your application\n\t */\n\t$client->client_id = '';\n\n\t/* OAuth client secret\n\t * Set this to values defined by the OAuth server for your application\n\t */\n\t$client->client_secret = '';\n\n\t/* OAuth client permissions\n\t * Set this to the name of the permissions you need to access the\n\t * application API\n\t */\n\t$client->scope = '';\n\t\n\t/* Process the OAuth server interactions */\n\tif(($success = $client->Initialize()))\n\t{\n\t\t/*\n\t\t * Call the Process function to make the class dialog with the OAuth\n\t\t * server. If you previously have retrieved the access token and set\n\t\t * the respective class variables manually, you may skip this call and\n\t\t * use the CallAPI function directly.\n\t\t */\n\t\t$success = $client->Process();\n\t\t// Make sure the access token was successfully obtained before making\n\t\t// API calls\n\t\t/*\n\t\t * if(strlen($client->access_token))\n\t\t * {\n\t\t *   $success = $client->CallAPI();\n\t\t * }\n\t\t */\n\t\t\n\t\t/* Internal cleanup call\n\t\t */\n\t\t$success = $client->Finalize($success);\n\t}\n\t/*\n\t * If the exit variable is true, the script must not output anything\n\t * else and exit immediately\n\t */\n\tif($client->exit)\n\t\texit;\n\t\n\tif($success)\n\t{\n\t\t/*\n\t\t * The Output function call is here just for debugging purposes\n\t\t * It is not necessary to call it in real applications\n\t\t */\n\t\t$client->Output();\n\t}\n\telse\n\t{\n\t\t/* \n\t\t * If there was an unexpected error, display to the user\n\t\t * some useful information\n\t\t */\n?>\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n<html>\n<head>\n<title>OAuth client error</title>\n</head>\n<body>\n<h1>OAuth client error</h1>\n<pre>Error: <?php echo HtmlSpecialChars($client->error); ?></pre>\n</body>\n</html>\n<?php\n\t}\n\n?>"]],"start1":0,"start2":0,"length1":0,"length2":3236}]],"length":3236}

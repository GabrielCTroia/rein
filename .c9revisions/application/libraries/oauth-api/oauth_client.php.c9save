{"ts":1357410448373,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php\n/*\n * oauth_client.php\n *\n * @(#) $Id: oauth_client.php,v 1.37 2012/11/13 09:15:36 mlemos Exp $\n *\n */\n\n/*\n{metadocument}<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>\n<class>\n\n\t<package>net.manuellemos.oauth</package>\n\n\t<version>@(#) $Id: oauth_client.php,v 1.37 2012/11/13 09:15:36 mlemos Exp $</version>\n\t<copyright>Copyright ï¿½ (C) Manuel Lemos 2012</copyright>\n\t<title>OAuth client</title>\n\t<author>Manuel Lemos</author>\n\t<authoraddress>mlemos-at-acm.org</authoraddress>\n\n\t<documentation>\n\t\t<idiom>en</idiom>\n\t\t<purpose>This class serves two main purposes:<paragraphbreak />\n\t\t\t1) Implement the OAuth protocol to retrieve a token from a server to\n\t\t\tauthorize the access to an API on behalf of the current\n\t\t\tuser.<paragraphbreak />\n\t\t\t2) Perform calls to a Web services API using a token previously\n\t\t\tobtained using this class or a token provided some other way by the\n\t\t\tWeb services provider.</purpose>\n\t\t<usage>Regardless of your purposes, you always need to start calling\n\t\t\tthe class <functionlink>Initialize</functionlink> function after\n\t\t\tinitializing setup variables. After you are done with the class,\n\t\t\talways call the <functionlink>Finalize</functionlink> function at\n\t\t\tthe end.<paragraphbreak />\n\t\t\tThis class supports either OAuth protocol versions 1.0, 1.0a and\n\t\t\t2.0. It abstracts the differences between these protocol versions,\n\t\t\tso the class usage is the same independently of the OAuth\n\t\t\tversion of the server.<paragraphbreak />\n\t\t\tThe class also provides built-in support to several popular OAuth\n\t\t\tservers, so you do not have to manually configure all the details to\n\t\t\taccess those servers. Just set the\n\t\t\t<variablelink>server</variablelink> variable to configure the class\n\t\t\tto access one of the built-in supported servers.<paragraphbreak />\n\t\t\tIf you need to access one type of server that is not yet directly\n\t\t\tsupported by the class, you need to configure it explicitly setting\n\t\t\tthe variables: <variablelink>oauth_version</variablelink>,\n\t\t\t<variablelink>url_parameters</variablelink>,\n\t\t\t<variablelink>authorization_header</variablelink>,\n\t\t\t<variablelink>request_token_url</variablelink>,\n\t\t\t<variablelink>dialog_url</variablelink>,\n\t\t\t<variablelink>append_state_to_redirect_uri</variablelink> and\n\t\t\t<variablelink>access_token_url</variablelink>.<paragraphbreak />\n\t\t\tBefore proceeding to the actual OAuth authorization process, you\n\t\t\tneed to have registered your application with the OAuth server. The\n\t\t\tregistration provides you values to set the variables\n\t\t\t<variablelink>client_id</variablelink> and \n\t\t\t<variablelink>client_secret</variablelink>.<paragraphbreak />\n\t\t\tYou also need to set the variables\n\t\t\t<variablelink>redirect_uri</variablelink> and\n\t\t\t<variablelink>scope</variablelink> before calling the\n\t\t\t<functionlink>Process</functionlink> function to make the class\n\t\t\tperform the necessary interactions with the OAuth\n\t\t\tserver.<paragraphbreak />\n\t\t\tThe OAuth protocol involves multiple steps that include redirection\n\t\t\tto the OAuth server. There it asks permission to the current user to\n\t\t\tgrant your application access to APIs on his/her behalf. When there\n\t\t\tis a redirection, the class will set the\n\t\t\t<variablelink>exit</variablelink> variable to\n\t\t\t<booleanvalue>1</booleanvalue>. Then your script should exit\n\t\t\timmediately without outputting anything.<paragraphbreak />\n\t\t\tWhen the OAuth access token is successfully obtained, the following\n\t\t\tvariables are set by the class with the obtained values:\n\t\t\t<variablelink>access_token</variablelink>,\n\t\t\t<variablelink>access_token_secret</variablelink>,\n\t\t\t<variablelink>access_token_expiry</variablelink>,\n\t\t\t<variablelink>access_token_type</variablelink>. You may want to\n\t\t\tstore these values to use them later when calling the server\n\t\t\tAPIs.<paragraphbreak />\n\t\t\tIf there was a problem during OAuth authorization process, check the\n\t\t\tvariable <variablelink>authorization_error</variablelink> to\n\t\t\tdetermine the reason.<paragraphbreak />\n\t\t\tOnce you get the access token, you can call the server APIs using\n\t\t\tthe <functionlink>CallAPI</functionlink> function. Check the\n\t\t\t<variablelink>access_token_error</variablelink> variable to\n\t\t\tdetermine if there was an error when trying to to call the\n\t\t\tAPI.<paragraphbreak />\n\t\t\tIf for some reason the user has revoked the access to your\n\t\t\tapplication, you need to ask the user to authorize your application\n\t\t\tagain. First you may need to call the function\n\t\t\t<functionlink>ResetAccessToken</functionlink> to reset the value of\n\t\t\tthe access token that may be cached in session variables.</usage>\n\t</documentation>\n\n{/metadocument}\n*/\n\nclass oauth_client_class\n{\n/*\n{metadocument}\n\t<variable>\n\t\t<name>error</name>\n\t\t<type>STRING</type>\n\t\t<value></value>\n\t\t<documentation>\n\t\t\t<purpose>Store the message that is returned when an error\n\t\t\t\toccurs.</purpose>\n\t\t\t<usage>Check this variable to understand what happened when a call to\n\t\t\t\tany of the class functions has failed.<paragraphbreak />\n\t\t\t\tThis class uses cumulative error handling. This means that if one\n\t\t\t\tclass functions that may fail is called and this variable was\n\t\t\t\talready set to an error message due to a failure in a previous call\n\t\t\t\tto the same or other function, the function will also fail and does\n\t\t\t\tnot do anything.<paragraphbreak />\n\t\t\t\tThis allows programs using this class to safely call several\n\t\t\t\tfunctions that may fail and only check the failure condition after\n\t\t\t\tthe last function call.<paragraphbreak />\n\t\t\t\tJust set this variable to an empty string to clear the error\n\t\t\t\tcondition.</usage>\n\t\t</documentation>\n\t</variable>\n{/metadocument}\n*/\n\tvar $error = '';\n\n/*\n{metadocument}\n\t<variable>\n\t\t<name>debug</name>\n\t\t<type>BOOLEAN</type>\n\t\t<value>0</value>\n\t\t<documentation>\n\t\t\t<purpose>Control whether debug output is enabled</purpose>\n\t\t\t<usage>Set this variable to <booleanvalue>1</booleanvalue> if you\n\t\t\t\tneed to check what is going on during calls to the class. When\n\t\t\t\tenabled, the debug output goes either to the variable\n\t\t\t\t<variablelink>debug_output</variablelink> and the PHP error log.</usage>\n\t\t</documentation>\n\t</variable>\n{/metadocument}\n*/\n\tvar $debug = false;\n\n/*\n{metadocument}\n\t<variable>\n\t\t<name>debug_http</name>\n\t\t<type>BOOLEAN</type>\n\t\t<value>0</value>\n\t\t<documentation>\n\t\t\t<purpose>Control whether the dialog with the remote Web server\n\t\t\t\tshould also be logged.</purpose>\n\t\t\t<usage>Set this variable to <booleanvalue>1</booleanvalue> if you\n\t\t\t\twant to inspect the data exchange with the OAuth server.</usage>\n\t\t</documentation>\n\t</variable>\n{/metadocument}\n*/\n\tvar $debug_http = false;\n\n/*\n{metadocument}\n\t<variable>\n\t\t<name>exit</name>\n\t\t<type>BOOLEAN</type>\n\t\t<value>0</value>\n\t\t<documentation>\n\t\t\t<purpose>Determine if the current script should be exited.</purpose>\n\t\t\t<usage>Check this variable after calling the\n\t\t\t\t<functionlink>Process</functionlink> function and exit your script\n\t\t\t\timmediately if the variable is set to\n\t\t\t\t<booleanvalue>1</booleanvalue>.</usage>\n\t\t</documentation>\n\t</variable>\n{/metadocument}\n*/\n\tvar $exit = false;\n\n/*\n{metadocument}\n\t<variable>\n\t\t<name>debug_output</name>\n\t\t<type>STRING</type>\n\t\t<value></value>\n\t\t<documentation>\n\t\t\t<purpose>Capture the debug output generated by the class</purpose>\n\t\t\t<usage>Inspect this variable if you need to see what happened during\n\t\t\t\tthe class function calls.</usage>\n\t\t</documentation>\n\t</variable>\n{/metadocument}\n*/\n\tvar $debug_output = '';\n\n/*\n{metadocument}\n\t<variable>\n\t\t<name>debug_prefix</name>\n\t\t<type>STRING</type>\n\t\t<value>OAuth client: </value>\n\t\t<documentation>\n\t\t\t<purpose>Mark the lines of the debug output to identify actions\n\t\t\t\tperformed by this class.</purpose>\n\t\t\t<usage>Change this variable if you prefer the debug output lines to\n\t\t\t\tbe prefixed with a different text.</usage>\n\t\t</documentation>\n\t</variable>\n{/metadocument}\n*/\n\tvar $debug_prefix = 'OAuth client: ';\n\n/*\n{metadocument}\n\t<variable>\n\t\t<name>server</name>\n\t\t<type>STRING</type>\n\t\t<value></value>\n\t\t<documentation>\n\t\t\t<purpose>Identify the type of OAuth server to access.</purpose>\n\t\t\t<usage>The class provides built-in support to several types of OAuth\n\t\t\t\tservers. This means that the class can automatically initialize\n\t\t\t\tseveral configuration variables just by setting this server\n\t\t\t\tvariable.<paragraphbreak />\n\t\t\t\tCurrently it supports the following servers:\n\t\t\t\t<stringvalue>Facebook</stringvalue>,\n\t\t\t\t<stringvalue>Flickr</stringvalue>,\n\t\t\t\t<stringvalue>Foursquare</stringvalue>,\n\t\t\t\t<stringvalue>github</stringvalue>,\n\t\t\t\t<stringvalue>Google</stringvalue>,\n\t\t\t\t<stringvalue>Microsoft</stringvalue>,\n\t\t\t\t<stringvalue>Tumblr</stringvalue>,\n\t\t\t\t<stringvalue>Twitter</stringvalue> and\n\t\t\t\t<stringvalue>Yahoo</stringvalue>. Please contact the author if you\n\t\t\t\twould like to ask to add built-in support for other types of OAuth\n\t\t\t\tservers.<paragraphbreak />\n\t\t\t\tIf you want to access other types of OAuth servers that are not\n\t\t\t\tyet supported, set this variable to an empty string and configure\n\t\t\t\tother variables with values specific to those servers.</usage>\n\t\t</documentation>\n\t</variable>\n{/metadocument}\n*/\n\tvar $server = '';\n\n/*\n{metadocument}\n\t<variable>\n\t\t<name>request_token_url</name>\n\t\t<type>STRING</type>\n\t\t<value></value>\n\t\t<documentation>\n\t\t\t<purpose>URL of the OAuth server to request the initial token for\n\t\t\t\tOAuth 1.0 and 1.0a servers.</purpose>\n\t\t\t<usage>Set this variable to the OAuth request token URL when you are\n\t\t\t\tnot accessing one of the built-in supported OAuth servers.</usage>\n\t\t</documentation>\n\t</variable>\n{/metadocument}\n*/\n\tvar $request_token_url = '';\n\n/*\n{metadocument}\n\t<variable>\n\t\t<name>dialog_url</name>\n\t\t<type>STRING</type>\n\t\t<value></value>\n\t\t<documentation>\n\t\t\t<purpose>URL of the OAuth server to redirect the browser so the user\n\t\t\t\tcan grant access to your application.</purpose>\n\t\t\t<usage>Set this variable to the OAuth request token URL when you are\n\t\t\t\tnot accessing one of the built-in supported OAuth servers.<paragraphbreak />\n\t\t\t\tFor OAuth 2.0 servers, the dialog URL can have certain marks that\n\t\t\t\twill act as template placeholders that will be replaced with values\n\t\t\t\tdefined before redirecting the users browser. Currently it\n\t\t\t\tsupports the following placeholder marks:<paragraphbreak />\n\t\t\t\t{REDIRECT_URI} - URL to redirect when returning from the OAuth\n\t\t\t\tserver authorization page<paragraphbreak />\n\t\t\t\t{CLIENT_ID} - client application identifier registered at the\n\t\t\t\tserver<paragraphbreak />\n\t\t\t\t{SCOPE} - scope of the requested permissions to the granted by the\n\t\t\t\tOAuth server with the user permission<paragraphbreak />\n\t\t\t\t{STATE} - identifier of the OAuth session state</usage>\n\t\t</documentation>\n\t</variable>\n{/metadocument}\n*/\n\tvar $dialog_url = '';\n\n/*\n{metadocument}\n\t<variable>\n\t\t<name>append_state_to_redirect_uri</name>\n\t\t<type>STRING</type>\n\t\t<value></value>\n\t\t<documentation>\n\t\t\t<purpose>Pass the OAuth session state in a variable with a different\n\t\t\t\tname to work around implementation bugs of certain OAuth\n\t\t\t\tservers</purpose>\n\t\t\t<usage>Set this variable  when you are not accessing one of the\n\t\t\t\tbuilt-in supported OAuth servers if the OAuth server has a bug\n\t\t\t\tthat makes it not pass back the OAuth state identifier in a\n\t\t\t\trequest variable named state.</usage>\n\t\t</documentation>\n\t</variable>\n{/metadocument}\n*/\n\tvar $append_state_to_redirect_uri = '';\n\n/*\n{metadocument}\n\t<variable>\n\t\t<name>access_token_url</name>\n\t\t<type>STRING</type>\n\t\t<value></value>\n\t\t<documentation>\n\t\t\t<purpose>OAuth server URL that will return the access token\n\t\t\t\tURL.</purpose>\n\t\t\t<usage>Set this variable to the OAuth access token URL when you are\n\t\t\t\tnot accessing one of the built-in supported OAuth servers.</usage>\n\t\t</documentation>\n\t</variable>\n{/metadocument}\n*/\n\tvar $access_token_url = '';\n\n\n/*\n{metadocument}\n\t<variable>\n\t\t<name>oauth_version</name>\n\t\t<type>STRING</type>\n\t\t<value>2.0</value>\n\t\t<documentation>\n\t\t\t<purpose>Version of the protocol version supported by the OAuth\n\t\t\t\tserver.</purpose>\n\t\t\t<usage>Set this variable to the OAuth server protocol version when\n\t\t\t\tyou are not accessing one of the built-in supported OAuth\n\t\t\t\tservers.</usage>\n\t\t</documentation>\n\t</variable>\n{/metadocument}\n*/\n\tvar $oauth_version = '2.0';\n\n/*\n{metadocument}\n\t<variable>\n\t\t<name>url_parameters</name>\n\t\t<type>BOOLEAN</type>\n\t\t<value>0</value>\n\t\t<documentation>\n\t\t\t<purpose>Determine if the API call parameters should be moved to the\n\t\t\t\tcall URL.</purpose>\n\t\t\t<usage>Set this variable to <booleanvalue>1</booleanvalue> if the\n\t\t\t\tAPI you need to call requires that the call parameters always be\n\t\t\t\tpassed via the API URL.</usage>\n\t\t</documentation>\n\t</variable>\n{/metadocument}\n*/\n\tvar $url_parameters = false;\n\n/*\n{metadocument}\n\t<variable>\n\t\t<name>authorization_header</name>\n\t\t<type>BOOLEAN</type>\n\t\t<value>1</value>\n\t\t<documentation>\n\t\t\t<purpose>Determine if the OAuth parameters should be passed via HTTP\n\t\t\t\tAuthorization request header.</purpose>\n\t\t\t<usage>Set this variable to <booleanvalue>1</booleanvalue> if the\n\t\t\t\tOAuth server requires that the OAuth parameters be passed using\n\t\t\t\tthe HTTP Authorization instead of the request URI parameters.</usage>\n\t\t</documentation>\n\t</variable>\n{/metadocument}\n*/\n\tvar $authorization_header = true;\n\n/*\n{metadocument}\n\t<variable>\n\t\t<name>redirect_uri</name>\n\t\t<type>STRING</type>\n\t\t<value></value>\n\t\t<documentation>\n\t\t\t<purpose>URL of the current script page that is calling this\n\t\t\t\tclass</purpose>\n\t\t\t<usage>Set this variable to the current script page URL before\n\t\t\t\tproceeding the the OAuth authorization process.</usage>\n\t\t</documentation>\n\t</variable>\n{/metadocument}\n*/\n\tvar $redirect_uri = '';\n\n/*\n{metadocument}\n\t<variable>\n\t\t<name>client_id</name>\n\t\t<type>STRING</type>\n\t\t<value></value>\n\t\t<documentation>\n\t\t\t<purpose>Identifier of your application registered with the OAuth\n\t\t\t\tserver</purpose>\n\t\t\t<usage>Set this variable to the application identifier that is\n\t\t\t\tprovided by the OAuth server when you register the\n\t\t\t\tapplication.</usage>\n\t\t</documentation>\n\t</variable>\n{/metadocument}\n*/\n\tvar $client_id = '';\n\n/*\n{metadocument}\n\t<variable>\n\t\t<name>client_secret</name>\n\t\t<type>STRING</type>\n\t\t<value></value>\n\t\t<documentation>\n\t\t\t<purpose>Secret value assigned to your application when it is\n\t\t\t\tregistered with the OAuth server.</purpose>\n\t\t\t<usage>Set this variable to the application secret that is provided\n\t\t\t\tby the OAuth server when you register the application.</usage>\n\t\t</documentation>\n\t</variable>\n{/metadocument}\n*/\n\tvar $client_secret = '';\n\n/*\n{metadocument}\n\t<variable>\n\t\t<name>scope</name>\n\t\t<type>STRING</type>\n\t\t<value></value>\n\t\t<documentation>\n\t\t\t<purpose>Permissions that your application needs to call the OAuth\n\t\t\t\tserver APIs</purpose>\n\t\t\t<usage>Check the documentation of the APIs that your application\n\t\t\t\tneeds to call to set this variable with the identifiers of the\n\t\t\t\tpermissions that the user needs to grant to your application.</usage>\n\t\t</documentation>\n\t</variable>\n{/metadocument}\n*/\n\tvar $scope = '';\n\n/*\n{metadocument}\n\t<variable>\n\t\t<name>access_token</name>\n\t\t<type>STRING</type>\n\t\t<value></value>\n\t\t<documentation>\n\t\t\t<purpose>Access token obtained from the OAuth server</purpose>\n\t\t\t<usage>Check this variable to get the obtained access token upon\n\t\t\t\tsuccessful OAuth authorization.</usage>\n\t\t</documentation>\n\t</variable>\n{/metadocument}\n*/\n\tvar $access_token = '';\n\n/*\n{metadocument}\n\t<variable>\n\t\t<name>access_token_secret</name>\n\t\t<type>STRING</type>\n\t\t<value></value>\n\t\t<documentation>\n\t\t\t<purpose>Access token secret obtained from the OAuth server</purpose>\n\t\t\t<usage>If the OAuth protocol version is 1.0 or 1.0a, check this\n\t\t\t\tvariable to get the obtained access token secret upon successful\n\t\t\t\tOAuth authorization.</usage>\n\t\t</documentation>\n\t</variable>\n{/metadocument}\n*/\n\tvar $access_token_secret = '';\n\n/*\n{metadocument}\n\t<variable>\n\t\t<name>access_token_expiry</name>\n\t\t<type>STRING</type>\n\t\t<value></value>\n\t\t<documentation>\n\t\t\t<purpose>Timestamp of the expiry of the access token obtained from\n\t\t\t\tthe OAuth server.</purpose>\n\t\t\t<usage>Check this variable to get the obtained access token expiry\n\t\t\t\ttime upon successful OAuth authorization. If this variable is\n\t\t\t\tempty, that means no expiry time was set.</usage>\n\t\t</documentation>\n\t</variable>\n{/metadocument}\n*/\n\tvar $access_token_expiry = '';\n\n/*\n{metadocument}\n\t<variable>\n\t\t<name>access_token_type</name>\n\t\t<type>STRING</type>\n\t\t<value></value>\n\t\t<documentation>\n\t\t\t<purpose>Type of access token obtained from the OAuth server.</purpose>\n\t\t\t<usage>Check this variable to get the obtained access token type\n\t\t\t\tupon successful OAuth authorization.</usage>\n\t\t</documentation>\n\t</variable>\n{/metadocument}\n*/\n\tvar $access_token_type = '';\n\n/*\n{metadocument}\n\t<variable>\n\t\t<name>access_token_error</name>\n\t\t<type>STRING</type>\n\t\t<value></value>\n\t\t<documentation>\n\t\t\t<purpose>Error message returned when a call to the API fails.</purpose>\n\t\t\t<usage>Check this variable to determine if there was an error while\n\t\t\t\tcalling the Web services API when using the\n\t\t\t\t<functionlink>CallAPI</functionlink> function.</usage>\n\t\t</documentation>\n\t</variable>\n{/metadocument}\n*/\n\tvar $access_token_error = '';\n\n/*\n{metadocument}\n\t<variable>\n\t\t<name>authorization_error</name>\n\t\t<type>STRING</type>\n\t\t<value></value>\n\t\t<documentation>\n\t\t\t<purpose>Error message returned when it was not possible to obtain\n\t\t\t\tan OAuth access token</purpose>\n\t\t\t<usage>Check this variable to determine if there was an error while\n\t\t\t\ttrying to obtain the OAuth access token.</usage>\n\t\t</documentation>\n\t</variable>\n{/metadocument}\n*/\n\tvar $authorization_error = '';\n\n/*\n{metadocument}\n\t<variable>\n\t\t<name>response_status</name>\n\t\t<type>INTEGER</type>\n\t\t<value>0</value>\n\t\t<documentation>\n\t\t\t<purpose>HTTP response status returned by the server when calling an\n\t\t\t\tAPI</purpose>\n\t\t\t<usage>Check this variable after calling the\n\t\t\t\t<functionlink>CallAPI</functionlink> function if the API calls and you\n\t\t\t\tneed to process the error depending the response status.\n\t\t\t\t<integervalue>200</integervalue> means no error. \n\t\t\t\t<integervalue>0</integervalue> means the server response was not\n\t\t\t\tretrieved.</usage>\n\t\t</documentation>\n\t</variable>\n{/metadocument}\n*/\n\tvar $response_status = 0;\n\n\tvar $oauth_user_agent = 'PHP-OAuth-API (http://www.phpclasses.org/oauth-api $Revision: 1.37 $)';\n\tvar $session_started = false;\n\n\tFunction SetError($error)\n\t{\n\t\t$this->error = $error;\n\t\tif($this->debug)\n\t\t\t$this->OutputDebug('Error: '.$error);\n\t\treturn(false);\n\t}\n\n\tFunction SetPHPError($error, &$php_error_message)\n\t{\n\t\tif(IsSet($php_error_message)\n\t\t&& strlen($php_error_message))\n\t\t\t$error.=\": \".$php_error_message;\n\t\treturn($this->SetError($error));\n\t}\n\n\tFunction OutputDebug($message)\n\t{\n\t\tif($this->debug)\n\t\t{\n\t\t\t$message = $this->debug_prefix.$message;\n\t\t\t$this->debug_output .= $message.\"\\n\";;\n\t\t\terror_log($message);\n\t\t}\n\t\treturn(true);\n\t}\n\n\tFunction GetRequestTokenURL(&$request_token_url)\n\t{\n\t\t$request_token_url = $this->request_token_url;\n\t\treturn(true);\n\t}\n\n\tFunction GetDialogURL(&$redirect_url)\n\t{\n\t\t$redirect_url = $this->dialog_url;\n\t\treturn(true);\n\t}\n\n\tFunction GetAccessTokenURL(&$access_token_url)\n\t{\n\t\t$access_token_url = $this->access_token_url;\n\t\treturn(true);\n\t}\n\n\tFunction GetStoredState(&$state)\n\t{\n\t\tif(IsSet($_SESSION['OAUTH_STATE']))\n\t\t\t$state = $_SESSION['OAUTH_STATE'];\n\t\telse\n\t\t\t$state = $_SESSION['OAUTH_STATE'] = time().'-'.substr(md5(rand().time()), 0, 6);\n\t\treturn(true);\n\t}\n\n\tFunction GetRequestState(&$state)\n\t{\n\t\t$check = (strlen($this->append_state_to_redirect_uri) ? $this->append_state_to_redirect_uri : 'state');\n\t\t$state = (IsSet($_GET[$check]) ? $_GET[$check] : null);\n\t\treturn(true);\n\t}\n\n\tFunction GetRequestCode(&$code)\n\t{\n\t\t$code = (IsSet($_GET['code']) ? $_GET['code'] : null);\n\t\treturn(true);\n\t}\n\n\tFunction GetRequestError(&$error)\n\t{\n\t\t$error = (IsSet($_GET['error']) ? $_GET['error'] : null);\n\t\treturn(true);\n\t}\n\n\tFunction GetRequestDenied(&$denied)\n\t{\n\t\t$denied = (IsSet($_GET['denied']) ? $_GET['denied'] : null);\n\t\treturn(true);\n\t}\n\n\tFunction GetRequestToken(&$token, &$verifier)\n\t{\n\t\t$token = (IsSet($_GET['oauth_token']) ? $_GET['oauth_token'] : null);\n\t\t$verifier = (IsSet($_GET['oauth_verifier']) ? $_GET['oauth_verifier'] : null);\n\t\treturn(true);\n\t}\n\n\tFunction GetRedirectURI(&$redirect_uri)\n\t{\n\t\tif(strlen($this->redirect_uri))\n\t\t\t$redirect_uri = $this->redirect_uri;\n\t\telse\n\t\t\t$redirect_uri = 'http://'.$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'];\n\t\treturn true;\n\t}\n\n/*\n{metadocument}\n\t<function>\n\t\t<name>StoreAccessToken</name>\n\t\t<type>BOOLEAN</type>\n\t\t<documentation>\n\t\t\t<purpose>Store the values of the access token when it is succefully\n\t\t\t\tretrieved from the OAuth server.</purpose>\n\t\t\t<usage>This function is meant to be only be called from inside the\n\t\t\t\tclass. By default it stores access tokens in a session variable\n\t\t\t\tnamed <stringvalue>OAUTH_ACCESS_TOKEN</stringvalue>.<paragraphbreak />\n\t\t\t\tActual implementations should create a sub-class and override this\n\t\t\t\tfunction to make the access token values be stored in other types\n\t\t\t\tof containers, like for instance databases.</usage>\n\t\t\t<returnvalue>This function should return\n\t\t\t\t<booleanvalue>1</booleanvalue> if the access token was stored\n\t\t\t\tsuccessfully.</returnvalue>\n\t\t</documentation>\n\t\t<argument>\n\t\t\t<name>access_token</name>\n\t\t\t<type>HASH</type>\n\t\t\t<documentation>\n\t\t\t\t<purpose>Associative array with properties of the access token. \n\t\t\t\t\tThe array may have set the following\n\t\t\t\t\tproperties:<paragraphbreak />\n\t\t\t\t\t<stringvalue>value</stringvalue>: string value of the access\n\t\t\t\t\t\ttoken<paragraphbreak />\n\t\t\t\t\t<stringvalue>authorized</stringvalue>: boolean value that\n\t\t\t\t\t\tdetermines if the access token was obtained\n\t\t\t\t\t\tsuccessfully<paragraphbreak />\n\t\t\t\t\t<stringvalue>expiry</stringvalue>: (optional) timestamp in ISO\n\t\t\t\t\t\tformat relative to UTC time zone of the access token expiry\n\t\t\t\t\t\ttime<paragraphbreak />\n\t\t\t\t\t<stringvalue>type</stringvalue>: (optional) type of OAuth token\n\t\t\t\t\t\tthat may determine how it should be used when sending API call\n\t\t\t\t\t\trequests.</purpose>\n\t\t\t</documentation>\n\t\t</argument>\n\t\t<do>\n{/metadocument}\n*/\n\tFunction StoreAccessToken($access_token)\n\t{\n\t\t$_SESSION['OAUTH_ACCESS_TOKEN'][$this->access_token_url] = $access_token;\n\t\treturn true;\n\t}\n/*\n{metadocument}\n\t\t</do>\n\t</function>\n{/metadocument}\n*/\n\n/*\n{metadocument}\n\t<function>\n\t\t<name>GetAccessToken</name>\n\t\t<type>BOOLEAN</type>\n\t\t<documentation>\n\t\t\t<purpose>Retrieve the OAuth access token if it was already\n\t\t\t\tpreviously stored by the\n\t\t\t\t<functionlink>StoreAccessToken</functionlink> function.</purpose>\n\t\t\t<usage>This function is meant to be only be called from inside the\n\t\t\t\tclass. By default it retrieves access tokens stored in a session\n\t\t\t\tvariable named\n\t\t\t\t<stringvalue>OAUTH_ACCESS_TOKEN</stringvalue>.<paragraphbreak />\n\t\t\t\tActual implementations should create a sub-class and override this\n\t\t\t\tfunction to retrieve the access token values from other types of\n\t\t\t\tcontainers, like for instance databases.</usage>\n\t\t\t<returnvalue>This function should return\n\t\t\t\t<booleanvalue>1</booleanvalue> if the access token was retrieved\n\t\t\t\tsuccessfully.</returnvalue>\n\t\t</documentation>\n\t\t<argument>\n\t\t\t<name>access_token</name>\n\t\t\t<type>STRING</type>\n\t\t\t<out />\n\t\t\t<documentation>\n\t\t\t\t<purpose>Return the properties of the access token in an\n\t\t\t\t\tassociative array. If the access token was not yet stored, it\n\t\t\t\t\treturns an empty array. Otherwise, the properties it may return\n\t\t\t\t\tare the same that may be passed to the\n\t\t\t\t\t<functionlink>StoreAccessToken</functionlink>.</purpose>\n\t\t\t</documentation>\n\t\t</argument>\n\t\t<do>\n{/metadocument}\n*/\n\tFunction GetAccessToken(&$access_token)\n\t{\n\t\tif(!$this->session_started\n\t\t&& !session_start())\n\t\t\treturn($this->SetPHPError('it was not possible to start the PHP session', $php_error_message));\n\t\t$this->session_started = true;\n\t\tif(IsSet($_SESSION['OAUTH_ACCESS_TOKEN'][$this->access_token_url]))\n\t\t\t$access_token = $_SESSION['OAUTH_ACCESS_TOKEN'][$this->access_token_url];\n\t\telse\n\t\t\t$access_token = array();\n\t\treturn true;\n\t}\n/*\n{metadocument}\n\t\t</do>\n\t</function>\n{/metadocument}\n*/\n\n/*\n{metadocument}\n\t<function>\n\t\t<name>ResetAccessToken</name>\n\t\t<type>BOOLEAN</type>\n\t\t<documentation>\n\t\t\t<purpose>Reset the access token to a state back when the user has\n\t\t\t\tnot yet authorized the access to the OAuth server API.</purpose>\n\t\t\t<usage>Call this function if for some reason the token to access\n\t\t\t\tthe API was revoked and you need to ask the user to authorize\n\t\t\t\tthe access again.<paragraphbreak />\n\t\t\t\tBy default the class stores and retrieves access tokens in a\n\t\t\t\tsession variable named\n\t\t\t\t<stringvalue>OAUTH_ACCESS_TOKEN</stringvalue>.<paragraphbreak />\n\t\t\t\tThis function must be called when the user is accessing your site\n\t\t\t\tpages, so it can reset the information stored in session variables\n\t\t\t\tthat cache the state of a previously retrieved access\n\t\t\t\ttoken.<paragraphbreak />\n\t\t\t\tActual implementations should create a sub-class and override this\n\t\t\t\tfunction to reset the access token state when it is stored in\n\t\t\t\tother types of containers, like for instance databases.</usage>\n\t\t\t<returnvalue>This function should return\n\t\t\t\t<booleanvalue>1</booleanvalue> if the access token was resetted\n\t\t\t\tsuccessfully.</returnvalue>\n\t\t</documentation>\n\t\t<do>\n{/metadocument}\n*/\n\tFunction ResetAccessToken()\n\t{\n\t\tif($this->debug)\n\t\t\t$this->OutputDebug('Resetting the access token status for OAuth server located at '.$this->access_token_url);\n\t\tif(!$this->session_started\n\t\t&& !session_start())\n\t\t\treturn($this->SetPHPError('it was not possible to start the PHP session', $php_error_message));\n\t\t$this->session_started = true;\n\t\tif(IsSet($_SESSION['OAUTH_ACCESS_TOKEN'][$this->access_token_url]))\n\t\t\tUnset($_SESSION['OAUTH_ACCESS_TOKEN'][$this->access_token_url]);\n\t\treturn true;\n\t}\n/*\n{metadocument}\n\t\t</do>\n\t</function>\n{/metadocument}\n*/\n\n\tFunction Encode($value)\n\t{\n\t\treturn(is_array($value) ? $this->EncodeArray($value) : str_replace('%7E', '~', str_replace('+',' ', RawURLEncode($value))));\n\t}\n\n\tFunction EncodeArray($array)\n\t{\n\t\tforeach($array as $key => $value)\n\t\t\t$array[$key] = $this->Encode($value);\n\t\treturn $array;\n\t}\n\n\tFunction HMAC($function, $data, $key)\n\t{\n\t\tswitch($function)\n\t\t{\n\t\t\tcase 'sha1':\n\t\t\t\t$pack = 'H40';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tif($this->debug)\n\t\t\t\t\t$this->OutputDebug($function.' is not a supported an HMAC hash type');\n\t\t\t\treturn('');\n\t\t}\n\t\tif(strlen($key) > 64)\n\t\t\t$key = pack($pack, $function($key));\n\t\tif(strlen($key) < 64)\n\t\t\t$key = str_pad($key, 64, \"\\0\");\n\t\treturn(pack($pack, $function((str_repeat(\"\\x5c\", 64) ^ $key).pack($pack, $function((str_repeat(\"\\x36\", 64) ^ $key).$data)))));\n\t}\n\n\tFunction SendAPIRequest($url, $method, $parameters, $oauth, $options, &$response)\n\t{\n\t\t$this->response_status = 0;\n\t\t$http = new http_class;\n\t\t$http->debug = ($this->debug && $this->debug_http);\n\t\t$http->log_debug = true;\n\t\t$http->sasl_authenticate = 0;\n\t\t$http->user_agent = $this->oauth_user_agent;\n\t\tif($this->debug)\n\t\t\t$this->OutputDebug('Accessing the '.$options['Resource'].' at '.$url);\n\t\t$arguments = array();\n\t\t$method = strtoupper($method);\n\t\t$authorization = '';\n\t\tif(IsSet($oauth))\n\t\t{\n\t\t\t$values = array(\n\t\t\t\t'oauth_consumer_key'=>$this->client_id,\n\t\t\t\t'oauth_nonce'=>md5(uniqid(rand(), true)),\n\t\t\t\t'oauth_signature_method'=>'HMAC-SHA1',\n\t\t\t\t'oauth_timestamp'=>time(),\n\t\t\t\t'oauth_version'=>'1.0',\n\t\t\t);\n\t\t\tif($this->url_parameters\n\t\t\t&& count($parameters))\n\t\t\t{\n\t\t\t\t$first = (strpos($url, '?') === false);\n\t\t\t\tforeach($parameters as $parameter => $value)\n\t\t\t\t\t$url .= ($first ? '?' : '&').UrlEncode($parameter).'='.UrlEncode($value);\n\t\t\t\t$parameters = array();\n\t\t\t}\n\t\t\t$values = array_merge($values, $oauth, $parameters);\n\t\t\t$uri = strtok($url, '?');\n\t\t\t$sign = $method.'&'.$this->Encode($uri).'&';\n\t\t\t$first = true;\n\t\t\t$sign_values = $values;\n\t\t\t$u = parse_url($url);\n\t\t\tif(IsSet($u['query']))\n\t\t\t{\n\t\t\t\tparse_str($u['query'], $q);\n\t\t\t\tforeach($q as $parameter => $value)\n\t\t\t\t\t$sign_values[$parameter] = $value;\n\t\t\t}\n\t\t\tKSort($sign_values);\n\t\t\tforeach($sign_values as $parameter => $value)\n\t\t\t{\n\t\t\t\t$sign .= $this->Encode(($first ? '' : '&').$parameter.'='.$this->Encode($value));\n\t\t\t\t$first = false;\n\t\t\t}\n\t\t\t$key = $this->Encode($this->client_secret).'&'.$this->Encode($this->access_token_secret);\n\t\t\t$values['oauth_signature'] = base64_encode($this->HMAC('sha1', $sign, $key));\n\t\t\tif($this->authorization_header)\n\t\t\t{\n\t\t\t\t$authorization = 'OAuth';\n\t\t\t\t$first = true;\n\t\t\t\tforeach($values as $parameter => $value)\n\t\t\t\t{\n\t\t\t\t\t$authorization .= ($first ? ' ' : ',').$parameter.'=\"'.$this->Encode($value).'\"';\n\t\t\t\t\t$first = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif($method === 'GET')\n\t\t\t\t{\n\t\t\t\t\t$first = (strcspn($url, '?') == strlen($url));\n\t\t\t\t\tforeach($values as $parameter => $value)\n\t\t\t\t\t{\n\t\t\t\t\t\t$url .= ($first ? '?' : '&').$parameter.'='.$this->Encode($value);\n\t\t\t\t\t\t$first = false;\n\t\t\t\t\t}\n\t\t\t\t\t$post_values = array();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\t$post_values = $values;\n\t\t\t}\n\t\t}\n\t\tif(strlen($error = $http->GetRequestArguments($url, $arguments)))\n\t\t\treturn($this->SetError('it was not possible to open the '.$options['Resource'].' URL: '.$error));\n\t\tif(strlen($error = $http->Open($arguments)))\n\t\t\treturn($this->SetError('it was not possible to open the '.$options['Resource'].' URL: '.$error));\n\t\t$arguments['RequestMethod'] = $method;\n\t\tswitch($type = (IsSet($options['RequestContentType']) ? strtolower($options['RequestContentType']) : 'application/x-www-form-urlencoded'))\n\t\t{\n\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t$arguments['PostValues'] = $parameters;\n\t\t\t\tbreak;\n\t\t\tcase 'application/json':\n\t\t\t\t$arguments['Headers']['Content-Type'] = $options['RequestContentType'];\n\t\t\t\t$arguments['Body'] = json_encode($parameters);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn($this->SetError($type.' is not a supported content type for sending the '.$options['Resource'].' request values'));\n\t\t}\n\t\t$arguments['Headers']['Accept'] = '*/*';\n\t\tif(strlen($authorization))\n\t\t\t$arguments['Headers']['Authorization'] = $authorization;\n\t\tif(strlen($error = $http->SendRequest($arguments))\n\t\t|| strlen($error = $http->ReadReplyHeaders($headers)))\n\t\t{\n\t\t\t$http->Close();\n\t\t\treturn($this->SetError('it was not possible to retrieve the '.$options['Resource'].': '.$error));\n\t\t}\n\t\t$error = $http->ReadWholeReplyBody($data);\n\t\t$http->Close();\n\t\tif(strlen($error))\n\t\t{\n\t\t\treturn($this->SetError('it was not possible to access the '.$options['Resource'].': '.$error));\n\t\t}\n\t\t$this->response_status = intval($http->response_status);\n\t\t$content_type = (IsSet($headers['content-type']) ? strtolower(strtok(trim($headers['content-type']), ';')) : 'unspecified');\n\t\tswitch($content_type)\n\t\t{\n\t\t\tcase 'text/javascript':\n\t\t\tcase 'application/json':\n\t\t\t\tif(!function_exists('json_decode'))\n\t\t\t\t\treturn($this->SetError('the JSON extension is not available in this PHP setup'));\n\t\t\t\t$object = json_decode($data);\n\t\t\t\tswitch(GetType($object))\n\t\t\t\t{\n\t\t\t\t\tcase 'object':\n\t\t\t\t\t\tif(!IsSet($options['ConvertObjects'])\n\t\t\t\t\t\t|| !$options['ConvertObjects'])\n\t\t\t\t\t\t\t$response = $object;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$response = array();\n\t\t\t\t\t\t\tforeach($object as $property => $value)\n\t\t\t\t\t\t\t\t$response[$property] = $value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'array':\n\t\t\t\t\t\t$response = $data;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn($this->SetError('it was not returned a valid JSON definition of the '.$options['Resource'].' values'));\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\tcase 'text/plain':\n\t\t\tcase 'text/html':\n\t\t\t\tparse_str($data, $response);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$response = $data;\n\t\t\t\tbreak;\n\t\t}\n\t\tswitch($this->response_status)\n\t\t{\n\t\t\tcase 200:\n\t\t\t\t$this->access_token_error = '';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$this->access_token_error = 'it was not possible to access the '.$options['Resource'].': it was returned an unexpected response status '.$http->response_status.' Response: '.$data;\n\t\t\t\tif($this->debug)\n\t\t\t\t\t$this->OutputDebug('Could not retrieve the OAuth access. Error: '.$this->access_token_error);\n\t\t\t\tif(IsSet($options['FailOnAccessError'])\n\t\t\t\t&& $options['FailOnAccessError'])\n\t\t\t\t{\n\t\t\t\t\t$this->error = $this->access_token_error;\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t}\n\t\treturn true;\n\t}\n\n/*\n{metadocument}\n\t<function>\n\t\t<name>CallAPI</name>\n\t\t<type>BOOLEAN</type>\n\t\t<documentation>\n\t\t\t<purpose>Send a HTTP request to the Web services API using a\n\t\t\t\tpreviously obtained authorization token via OAuth.</purpose>\n\t\t\t<usage>This function can be used to call an API after having\n\t\t\t\tpreviously obtained an access token through the OAuth protocol\n\t\t\t\tusing the <functionlink>Process</functionlink> function, or by\n\t\t\t\tdirectly setting the variables\n\t\t\t\t<variablelink>access_token</variablelink>, as well as\n\t\t\t\t<variablelink>access_token_secret</variablelink> in case of using\n\t\t\t\tOAuth 1.0 or 1.0a services.</usage>\n\t\t\t<returnvalue>This function returns <booleanvalue>1</booleanvalue> if\n\t\t\t\tthe call was done successfully.</returnvalue>\n\t\t</documentation>\n\t\t<argument>\n\t\t\t<name>url</name>\n\t\t\t<type>STRING</type>\n\t\t\t<documentation>\n\t\t\t\t<purpose>URL of the API where the HTTP request will be sent.</purpose>\n\t\t\t</documentation>\n\t\t</argument>\n\t\t<argument>\n\t\t\t<name>method</name>\n\t\t\t<type>STRING</type>\n\t\t\t<documentation>\n\t\t\t\t<purpose>HTTP method that will be used to send the request. It can\n\t\t\t\tbe <stringvalue>GET</stringvalue>,\n\t\t\t\t<stringvalue>POST</stringvalue>,\n\t\t\t\t<stringvalue>DELETE</stringvalue>, <stringvalue>PUT</stringvalue>,\n\t\t\t\tetc..</purpose>\n\t\t\t</documentation>\n\t\t</argument>\n\t\t<argument>\n\t\t\t<name>parameters</name>\n\t\t\t<type>HASH</type>\n\t\t\t<documentation>\n\t\t\t\t<purpose>Associative array with the names and values of the API\n\t\t\t\t\tcall request parameters.</purpose>\n\t\t\t</documentation>\n\t\t</argument>\n\t\t<argument>\n\t\t\t<name>options</name>\n\t\t\t<type>HASH</type>\n\t\t\t<documentation>\n\t\t\t\t<purpose>Associative array with additional options to configure\n\t\t\t\t\tthe request. Currently it supports the following\n\t\t\t\t\toptions:<paragraphbreak />\n\t\t\t\t\t<stringvalue>Resource</stringvalue>: string with a label that\n\t\t\t\t\t\twill be used in the error messages and debug log entries to\n\t\t\t\t\t\tidentify what operation the request is performing. The default\n\t\t\t\t\t\tvalue is <stringvalue>API call</stringvalue>.<paragraphbreak />\n\t\t\t\t\t<stringvalue>ConvertObjects</stringvalue>: boolean option that\n\t\t\t\t\t\tdetermines if objects should be converted into arrays when the\n\t\t\t\t\t\tresponse is returned in JSON format. The default value is\n\t\t\t\t\t\t<booleanvalue>0</booleanvalue>.<paragraphbreak />\n\t\t\t\t\t<stringvalue>FailOnAccessError</stringvalue>: boolean option\n\t\t\t\t\t\tthat determines if this functions should fail when the server\n\t\t\t\t\t\tresponse status is not 200. The default value is\n\t\t\t\t\t\t<booleanvalue>0</booleanvalue>.<paragraphbreak />\n\t\t\t\t\t<stringvalue>RequestContentType</stringvalue>: content type that\n\t\t\t\t\t\tshould be used to send the request values. It can be either\n\t\t\t\t\t\t<stringvalue>application/x-www-form-urlencoded</stringvalue>\n\t\t\t\t\t\tfor sending values like from Web forms, or\n\t\t\t\t\t\t<stringvalue>application/json</stringvalue> for sending the\n\t\t\t\t\t\tvalues encoded in JSON format. The default value is\n\t\t\t\t\t\t<stringvalue>application/x-www-form-urlencoded</stringvalue>.</purpose>\n\t\t\t</documentation>\n\t\t</argument>\n\t\t<argument>\n\t\t\t<name>response</name>\n\t\t\t<type>STRING</type>\n\t\t\t<out />\n\t\t\t<documentation>\n\t\t\t\t<purpose>Return the value of the API response. If the value is\n\t\t\t\t\tJSON encoded, this function will decode it and return the value\n\t\t\t\t\tconverted to respective types. If the value is form encoded,\n\t\t\t\t\tthis function will decode the response and return it as an\n\t\t\t\t\tarray. Otherwise, the class will return the value as a\n\t\t\t\t\tstring.</purpose>\n\t\t\t</documentation>\n\t\t</argument>\n\t\t<do>\n{/metadocument}\n*/\n\tFunction CallAPI($url, $method, $parameters, $options, &$response)\n\t{\n\t\tif(!IsSet($options['Resource']))\n\t\t\t$options['Resource'] = 'API call';\n\t\tif(!IsSet($options['ConvertObjects']))\n\t\t\t$options['ConvertObjects'] = false;\n\t\tswitch(intval($this->oauth_version))\n\t\t{\n\t\t\tcase 1:\n\t\t\t\t$oauth = array(\n\t\t\t\t\t'oauth_token'=>$this->access_token\n\t\t\t\t);\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\t$oauth = null;\n\t\t\t\t$url .= (strcspn($url, '?') < strlen($url) ? '&' : '?').'access_token='.UrlEncode($this->access_token);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\treturn($this->SetError($this->oauth_version.' is not a supported version of the OAuth protocol'));\n\t\t}\n\t\treturn($this->SendAPIRequest($url, $method, $parameters, $oauth, $options, $response));\n\t}\n/*\n{metadocument}\n\t\t</do>\n\t</function>\n{/metadocument}\n*/\n\n/*\n{metadocument}\n\t<function>\n\t\t<name>Initialize</name>\n\t\t<type>BOOLEAN</type>\n\t\t<documentation>\n\t\t\t<purpose>Initialize the class variables and internal state. It must\n\t\t\t\tbe called before calling other class functions.</purpose>\n\t\t\t<usage>Set the <variablelink>server</variablelink> variable before\n\t\t\t\tcalling this function to let it initialize the class variables to\n\t\t\t\twork with the specified server type. Alternatively, you can set\n\t\t\t\tother class variables manually to make it work with servers that\n\t\t\t\tare not yet built-in supported.</usage>\n\t\t\t<returnvalue>This function returns <booleanvalue>1</booleanvalue> if\n\t\t\t\tit was able to successfully initialize the class for the specified\n\t\t\t\tserver type.</returnvalue>\n\t\t</documentation>\n\t\t<do>\n{/metadocument}\n*/\n\tFunction Initialize()\n\t{\n\t\tswitch($this->server)\n\t\t{\n\t\t\tcase '';\n\t\t\t\tbreak;\n\n\t\t\tcase 'Dropbox':\n\t\t\t\t$this->oauth_version = '1.0';\n\t\t\t\t$this->request_token_url = 'https://api.dropbox.com/1/oauth/request_token';\n\t\t\t\t$this->dialog_url = 'https://www.dropbox.com/1/oauth/authorize';\n\t\t\t\t$this->append_state_to_redirect_uri = '';\n\t\t\t\t$this->access_token_url = 'https://api.dropbox.com/1/oauth/access_token';\n\t\t\t\t$this->authorization_header = false;\n\t\t\t\t$this->url_parameters = false;\n\t\t\t\tbreak;\n\n\t\t\tcase 'Facebook':\n\t\t\t\t$this->oauth_version = '2.0';\n\t\t\t\t$this->request_token_url = '';\n\t\t\t\t$this->dialog_url = 'https://www.facebook.com/dialog/oauth?client_id={CLIENT_ID}&redirect_uri={REDIRECT_URI}&scope={SCOPE}&state={STATE}';\n\t\t\t\t$this->append_state_to_redirect_uri = '';\n\t\t\t\t$this->access_token_url = 'https://graph.facebook.com/oauth/access_token';\n\t\t\t\t$this->authorization_header = true;\n\t\t\t\t$this->url_parameters = false;\n\t\t\t\tbreak;\n\n\t\t\tcase 'Flickr':\n\t\t\t\t$this->oauth_version = '1.0a';\n\t\t\t\t$this->request_token_url = 'http://www.flickr.com/services/oauth/request_token';\n\t\t\t\t$this->dialog_url = 'http://www.flickr.com/services/oauth/authorize';\n\t\t\t\t$this->append_state_to_redirect_uri = '';\n\t\t\t\t$this->access_token_url = 'http://www.flickr.com/services/oauth/access_token';\n\t\t\t\t$this->authorization_header = false;\n\t\t\t\t$this->url_parameters = false;\n\t\t\t\tbreak;\n\n\t\t\tcase 'Foursquare':\n\t\t\t\t$this->oauth_version = '2.0';\n\t\t\t\t$this->request_token_url = '';\n\t\t\t\t$this->dialog_url = 'https://foursquare.com/oauth2/authorize?client_id={CLIENT_ID}&scope={SCOPE}&response_type=code&redirect_uri={REDIRECT_URI}&state={STATE}';\n\t\t\t\t$this->append_state_to_redirect_uri = '';\n\t\t\t\t$this->access_token_url = 'https://foursquare.com/oauth2/access_token';\n\t\t\t\t$this->authorization_header = true;\n\t\t\t\t$this->url_parameters = false;\n\t\t\t\tbreak;\n\n\t\t\tcase 'github':\n\t\t\t\t$this->oauth_version = '2.0';\n\t\t\t\t$this->request_token_url = '';\n\t\t\t\t$this->dialog_url = 'https://github.com/login/oauth/authorize?client_id={CLIENT_ID}&redirect_uri={REDIRECT_URI}&scope={SCOPE}&state={STATE}';\n\t\t\t\t$this->append_state_to_redirect_uri = '';\n\t\t\t\t$this->access_token_url = 'https://github.com/login/oauth/access_token';\n\t\t\t\t$this->authorization_header = true;\n\t\t\t\t$this->url_parameters = false;\n\t\t\t\tbreak;\n\n\t\t\tcase 'Google':\n\t\t\t\t$this->oauth_version = '2.0';\n\t\t\t\t$this->request_token_url = '';\n\t\t\t\t$this->dialog_url = 'https://accounts.google.com/o/oauth2/auth?response_type=code&client_id={CLIENT_ID}&redirect_uri={REDIRECT_URI}&scope={SCOPE}&state={STATE}';\n\t\t\t\t$this->append_state_to_redirect_uri = '';\n\t\t\t\t$this->access_token_url = 'https://accounts.google.com/o/oauth2/token';\n\t\t\t\t$this->authorization_header = true;\n\t\t\t\t$this->url_parameters = false;\n\t\t\t\tbreak;\n\n\t\t\tcase 'Microsoft':\n\t\t\t\t$this->oauth_version = '2.0';\n\t\t\t\t$this->request_token_url = '';\n\t\t\t\t$this->dialog_url = 'https://login.live.com/oauth20_authorize.srf?client_id={CLIENT_ID}&scope={SCOPE}&response_type=code&redirect_uri={REDIRECT_URI}&state={STATE}';\n\t\t\t\t$this->append_state_to_redirect_uri = '';\n\t\t\t\t$this->access_token_url = 'https://login.live.com/oauth20_token.srf';\n\t\t\t\t$this->authorization_header = true;\n\t\t\t\t$this->url_parameters = false;\n\t\t\t\tbreak;\n\n\t\t\tcase 'Tumblr':\n\t\t\t\t$this->oauth_version = '1.0a';\n\t\t\t\t$this->request_token_url = 'http://www.tumblr.com/oauth/request_token';\n\t\t\t\t$this->dialog_url = 'http://www.tumblr.com/oauth/authorize';\n\t\t\t\t$this->append_state_to_redirect_uri = '';\n\t\t\t\t$this->access_token_url = 'http://www.tumblr.com/oauth/access_token';\n\t\t\t\t$this->authorization_header = true;\n\t\t\t\t$this->url_parameters = false;\n\t\t\t\tbreak;\n\n\t\t\tcase 'Twitter':\n\t\t\t\t$this->oauth_version = '1.0a';\n\t\t\t\t$this->request_token_url = 'https://api.twitter.com/oauth/request_token';\n\t\t\t\t$this->dialog_url = 'https://api.twitter.com/oauth/authenticate';\n\t\t\t\t$this->append_state_to_redirect_uri = '';\n\t\t\t\t$this->access_token_url = 'https://api.twitter.com/oauth/access_token';\n\t\t\t\t$this->authorization_header = true;\n\t\t\t\t$this->url_parameters = true;\n\t\t\t\tbreak;\n\n\t\t\tcase 'Yahoo':\n\t\t\t\t$this->oauth_version = '1.0a';\n\t\t\t\t$this->request_token_url = 'https://api.login.yahoo.com/oauth/v2/get_request_token';\n\t\t\t\t$this->dialog_url = 'https://api.login.yahoo.com/oauth/v2/request_auth';\n\t\t\t\t$this->access_token_url = 'https://api.login.yahoo.com/oauth/v2/get_token';\n\t\t\t\t$this->append_state_to_redirect_uri = '';\n\t\t\t\t$this->authorization_header = false;\n\t\t\t\t$this->url_parameters = false;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\treturn($this->SetError($this->server.' is not yet a supported type of OAuth server. Please contact the author Manuel Lemos <mlemos@acm.org> to request adding built-in support to this type of OAuth server.'));\n\t\t}\n\t\treturn(true);\n\t}\n/*\n{metadocument}\n\t\t</do>\n\t</function>\n{/metadocument}\n*/\n\n/*\n{metadocument}\n\t<function>\n\t\t<name>Process</name>\n\t\t<type>BOOLEAN</type>\n\t\t<documentation>\n\t\t\t<purpose>Process the OAuth protocol interaction with the OAuth\n\t\t\t\tserver.</purpose>\n\t\t\t<usage>Call this function when you need to retrieve the OAuth access\n\t\t\t\ttoken. Check the <variablelink>access_token</variablelink> to\n\t\t\t\tdetermine if the access token was obtained successfully.</usage>\n\t\t\t<returnvalue>This function returns <booleanvalue>1</booleanvalue> if\n\t\t\t\tthe OAuth protocol was processed without errors.</returnvalue>\n\t\t</documentation>\n\t\t<do>\n{/metadocument}\n*/\n\tFunction Process()\n\t{\n\t\tswitch(intval($this->oauth_version))\n\t\t{\n\t\t\tcase 1:\n\t\t\t\t$one_a = ($this->oauth_version === '1.0a');\n\t\t\t\tif($this->debug)\n\t\t\t\t\t$this->OutputDebug('Checking the OAuth token authorization state');\n\t\t\t\tif(!$this->GetAccessToken($access_token))\n\t\t\t\t\treturn false;\n\t\t\t\tif(IsSet($access_token['authorized'])\n\t\t\t\t&& IsSet($access_token['value']))\n\t\t\t\t{\n\t\t\t\t\t$expired = (IsSet($access_token['expiry']) && strcmp($access_token['expiry'], gmstrftime('%Y-%m-%d %H:%M:%S')) <= 0);\n\t\t\t\t\tif(!$access_token['authorized']\n\t\t\t\t\t|| $expired)\n\t\t\t\t\t{\n\t\t\t\t\t\tif($this->debug)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif($expired)\n\t\t\t\t\t\t\t\t$this->OutputDebug('The OAuth token expired on '.$access_token['expiry'].'UTC');\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t$this->OutputDebug('The OAuth token is not yet authorized');\n\t\t\t\t\t\t\t$this->OutputDebug('Checking the OAuth token and verifier');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(!$this->GetRequestToken($token, $verifier))\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\tif(!IsSet($token)\n\t\t\t\t\t\t|| ($one_a\n\t\t\t\t\t\t&& !IsSet($verifier)))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(!$this->GetRequestDenied($denied))\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\tif(IsSet($denied)\n\t\t\t\t\t\t\t&& $denied === $access_token['value'])\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif($this->debug)\n\t\t\t\t\t\t\t\t\t$this->OutputDebug('The authorization request was denied');\n\t\t\t\t\t\t\t\t$this->authorization_error = 'the request was denied';\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif($this->debug)\n\t\t\t\t\t\t\t\t\t$this->OutputDebug('Reset the OAuth token state because token and verifier are not both set');\n\t\t\t\t\t\t\t\t$access_token = array();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telseif($token !== $access_token['value'])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif($this->debug)\n\t\t\t\t\t\t\t\t$this->OutputDebug('Reset the OAuth token state because token does not match what as previously retrieved');\n\t\t\t\t\t\t\t$access_token = array();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(!$this->GetAccessTokenURL($url))\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t$oauth = array(\n\t\t\t\t\t\t\t\t'oauth_token'=>$token,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif($one_a)\n\t\t\t\t\t\t\t\t$oauth['oauth_verifier'] = $verifier;\n\t\t\t\t\t\t\t$this->access_token_secret = $access_token['secret'];\n\t\t\t\t\t\t\tif(!$this->SendAPIRequest($url, 'GET', array(), $oauth, array('Resource'=>'OAuth access token'), $response))\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\tif(strlen($this->access_token_error))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$this->authorization_error = $this->access_token_error;\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(!IsSet($response['oauth_token'])\n\t\t\t\t\t\t\t|| !IsSet($response['oauth_token_secret']))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$this->authorization_error= 'it was not returned the access token and secret';\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$access_token = array(\n\t\t\t\t\t\t\t\t'value'=>$response['oauth_token'],\n\t\t\t\t\t\t\t\t'secret'=>$response['oauth_token_secret'],\n\t\t\t\t\t\t\t\t'authorized'=>true\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif(IsSet($response['oauth_expires_in']))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$expires = $response['oauth_expires_in'];\n\t\t\t\t\t\t\t\tif(strval($expires) !== strval(intval($expires))\n\t\t\t\t\t\t\t\t|| $expires <= 0)\n\t\t\t\t\t\t\t\t\treturn($this->SetError('OAuth server did not return a supported type of access token expiry time'));\n\t\t\t\t\t\t\t\t$this->access_token_expiry = gmstrftime('%Y-%m-%d %H:%M:%S', time() + $expires);\n\t\t\t\t\t\t\t\tif($this->debug)\n\t\t\t\t\t\t\t\t\t$this->OutputDebug('Access token expiry: '.$this->access_token_expiry.' UTC');\n\t\t\t\t\t\t\t\t$access_token['expiry'] = $this->access_token_expiry;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t$this->access_token_expiry = '';\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(!$this->StoreAccessToken($access_token))\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\tif($this->debug)\n\t\t\t\t\t\t\t\t$this->OutputDebug('The OAuth token was authorized');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telseif($this->debug)\n\t\t\t\t\t\t$this->OutputDebug('The OAuth token was already authorized');\n\t\t\t\t\tif(IsSet($access_token['authorized'])\n\t\t\t\t\t&& $access_token['authorized'])\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->access_token = $access_token['value'];\n\t\t\t\t\t\t$this->access_token_secret = $access_token['secret'];\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif($this->debug)\n\t\t\t\t\t\t$this->OutputDebug('The OAuth access token is not set');\n\t\t\t\t\t$access_token = array();\n\t\t\t\t}\n\t\t\t\tif(!IsSet($access_token['authorized']))\n\t\t\t\t{\n\t\t\t\t\tif($this->debug)\n\t\t\t\t\t\t$this->OutputDebug('Requesting the unauthorized OAuth token');\n\t\t\t\t\tif(!$this->GetRequestTokenURL($url))\n\t\t\t\t\t\treturn false;\n\t\t\t\t\tif(!$this->GetRedirectURI($redirect_uri))\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t$oauth = array(\n\t\t\t\t\t\t'oauth_callback'=>$redirect_uri,\n\t\t\t\t\t);\n\t\t\t\t\tif(!$this->SendAPIRequest($url, 'GET', array(), $oauth, array('Resource'=>'OAuth request token'), $response))\n\t\t\t\t\t\treturn false;\n\t\t\t\t\tif(strlen($this->access_token_error))\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->authorization_error = $this->access_token_error;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tif(!IsSet($response['oauth_token'])\n\t\t\t\t\t|| !IsSet($response['oauth_token_secret']))\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->authorization_error = 'it was not returned the requested token';\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\t$access_token = array(\n\t\t\t\t\t\t'value'=>$response['oauth_token'],\n\t\t\t\t\t\t'secret'=>$response['oauth_token_secret'],\n\t\t\t\t\t\t'authorized'=>false\n\t\t\t\t\t);\n\t\t\t\t\tif(!$this->StoreAccessToken($access_token))\n\t\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif(!$this->GetDialogURL($url))\n\t\t\t\t\treturn false;\n\t\t\t\t$url .= '?oauth_token='.$access_token['value'];\n\t\t\t\tif(!$one_a)\n\t\t\t\t{\n\t\t\t\t\tif(!$this->GetRedirectURI($redirect_uri))\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t$url .= '&oauth_callback='.UrlEncode($redirect_uri);\n\t\t\t\t}\n\t\t\t\tif($this->debug)\n\t\t\t\t\t$this->OutputDebug('Redirecting to OAuth authorize page '.$url);\n\t\t\t\tHeader('HTTP/1.0 302 OAuth Redirection');\n\t\t\t\tHeader('Location: '.$url);\n\t\t\t\t$this->exit = true;\n\t\t\t\treturn true;\n\n\t\t\tcase 2:\n\t\t\t\tif($this->debug)\n\t\t\t\t\t$this->OutputDebug('Checking if OAuth access token was already retrieved from '.$this->access_token_url);\n\t\t\t\tif(!$this->GetAccessToken($access_token))\n\t\t\t\t\treturn false;\n\t\t\t\tif(IsSet($access_token['value']))\n\t\t\t\t{\n\t\t\t\t\tif(IsSet($access_token['expiry'])\n\t\t\t\t\t&& strcmp($this->access_token_expiry = $access_token['expiry'], gmstrftime('%Y-%m-%d %H:%M:%S')) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tif($this->debug)\n\t\t\t\t\t\t\t$this->OutputDebug('The OAuth access token expired in '.$this->access_token_expiry);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->access_token = $access_token['value'];\n\t\t\t\t\t\tif(IsSet($access_token['type']))\n\t\t\t\t\t\t\t$this->access_token_type = $access_token['type'];\n\t\t\t\t\t\tif($this->debug)\n\t\t\t\t\t\t\t$this->OutputDebug('The OAuth access token '.$this->access_token.' is valid');\n\t\t\t\t\t\tif(strlen($this->access_token_type)\n\t\t\t\t\t\t&& $this->debug)\n\t\t\t\t\t\t\t$this->OutputDebug('The OAuth access token is of type '.$this->access_token_type);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif($this->debug)\n\t\t\t\t\t$this->OutputDebug('Checking the authentication state in URI '.$_SERVER['REQUEST_URI']);\n\t\t\t\tif(!$this->GetStoredState($stored_state))\n\t\t\t\t\treturn false;\n\t\t\t\tif(strlen($stored_state) == 0)\n\t\t\t\t\treturn($this->SetError('it was not set the OAuth state'));\n\t\t\t\tif(!$this->GetRequestState($state))\n\t\t\t\t\treturn false;\n\t\t\t\tif($state === $stored_state)\n\t\t\t\t{\n\t\t\t\t\tif($this->debug)\n\t\t\t\t\t\t$this->OutputDebug('Checking the authentication code');\n\t\t\t\t\tif(!$this->GetRequestCode($code))\n\t\t\t\t\t\treturn false;\n\t\t\t\t\tif(strlen($code) == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(!$this->GetRequestError($this->authorization_error))\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\tif(IsSet($this->authorization_error))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif($this->debug)\n\t\t\t\t\t\t\t\t$this->OutputDebug('Authorization failed with error code '.$this->authorization_error);\n\t\t\t\t\t\t\tswitch($this->authorization_error)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcase 'invalid_request':\n\t\t\t\t\t\t\t\tcase 'unauthorized_client':\n\t\t\t\t\t\t\t\tcase 'access_denied':\n\t\t\t\t\t\t\t\tcase 'unsupported_response_type':\n\t\t\t\t\t\t\t\tcase 'invalid_scope':\n\t\t\t\t\t\t\t\tcase 'server_error':\n\t\t\t\t\t\t\t\tcase 'temporarily_unavailable':\n\t\t\t\t\t\t\t\tcase 'user_denied':\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\treturn($this->SetError('it was returned an unknown OAuth error code'));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn($this->SetError('it was not returned the OAuth dialog code'));\n\t\t\t\t\t}\n\t\t\t\t\tif(!$this->GetAccessTokenURL($url))\n\t\t\t\t\t\treturn false;\n\t\t\t\t\tif(!$this->GetRedirectURI($redirect_uri))\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t$values = array(\n\t\t\t\t\t\t'code'=>$code,\n\t\t\t\t\t\t'client_id'=>$this->client_id,\n\t\t\t\t\t\t'client_secret'=>$this->client_secret,\n\t\t\t\t\t\t'redirect_uri'=>$redirect_uri,\n\t\t\t\t\t\t'grant_type'=>'authorization_code'\n\t\t\t\t\t);\n\t\t\t\t\tif(!$this->SendAPIRequest($url, 'POST', $values, null, array('Resource'=>'OAuth access token', 'ConvertObjects'=>true), $response))\n\t\t\t\t\t\treturn false;\n\t\t\t\t\tif(strlen($this->access_token_error))\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->authorization_error = $this->access_token_error;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tif(!IsSet($response['access_token']))\n\t\t\t\t\t{\n\t\t\t\t\t\tif(IsSet($response['error']))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$this->authorization_error = 'it was not possible to retrieve the access token: it was returned the error: '.$response['error'];\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn($this->SetError('OAuth server did not return the access token'));\n\t\t\t\t\t}\n\t\t\t\t\t$access_token = array(\n\t\t\t\t\t\t'value'=>$this->access_token = $response['access_token'],\n\t\t\t\t\t\t'authorized'=>true\n\t\t\t\t\t);\n\t\t\t\t\tif($this->debug)\n\t\t\t\t\t\t$this->OutputDebug('Access token: '.$this->access_token);\n\t\t\t\t\tif(IsSet($response['expires'])\n\t\t\t\t\t|| IsSet($response['expires_in']))\n\t\t\t\t\t{\n\t\t\t\t\t\t$expires = (IsSet($response['expires']) ? $response['expires'] : $response['expires_in']);\n\t\t\t\t\t\tif(strval($expires) !== strval(intval($expires))\n\t\t\t\t\t\t|| $expires <= 0)\n\t\t\t\t\t\t\treturn($this->SetError('OAuth server did not return a supported type of access token expiry time'));\n\t\t\t\t\t\t$this->access_token_expiry = gmstrftime('%Y-%m-%d %H:%M:%S', time() + $expires);\n\t\t\t\t\t\tif($this->debug)\n\t\t\t\t\t\t\t$this->OutputDebug('Access token expiry: '.$this->access_token_expiry.' UTC');\n\t\t\t\t\t\t$access_token['expiry'] = $this->access_token_expiry;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\t$this->access_token_expiry = '';\n\t\t\t\t\tif(IsSet($response['token_type']))\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->access_token_type = $response['token_type'];\n\t\t\t\t\t\tif($this->debug)\n\t\t\t\t\t\t\t$this->OutputDebug('Access token type: '.$this->access_token_type);\n\t\t\t\t\t\t$access_token['type'] = $this->access_token_type;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\t$this->access_token_type = '';\n\t\t\t\t\tif(!$this->StoreAccessToken($access_token))\n\t\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif(!$this->GetDialogURL($url))\n\t\t\t\t\t\treturn false;\n\t\t\t\t\tif(strlen($url) == 0)\n\t\t\t\t\t\treturn($this->SetError('it was not set the OAuth dialog URL'));\n\t\t\t\t\tif(!$this->GetRedirectURI($redirect_uri))\n\t\t\t\t\t\treturn false;\n\t\t\t\t\tif(strlen($this->append_state_to_redirect_uri))\n\t\t\t\t\t\t$redirect_uri .= (strpos($redirect_uri, '?') === false ? '?' : '&').$this->append_state_to_redirect_uri.'='.$stored_state;\n\t\t\t\t\t$url = str_replace(\n\t\t\t\t\t\t'{REDIRECT_URI}', UrlEncode($redirect_uri), str_replace(\n\t\t\t\t\t\t'{CLIENT_ID}', UrlEncode($this->client_id), str_replace(\n\t\t\t\t\t\t'{SCOPE}', UrlEncode($this->scope), str_replace(\n\t\t\t\t\t\t'{STATE}', UrlEncode($stored_state),\n\t\t\t\t\t\t$url))));\n\t\t\t\t\tif($this->debug)\n\t\t\t\t\t\t$this->OutputDebug('Redirecting to OAuth Dialog '.$url);\n\t\t\t\t\tHeader('HTTP/1.0 302 OAuth Redirection');\n\t\t\t\t\tHeader('Location: '.$url);\n\t\t\t\t\t$this->exit = true;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\treturn($this->SetError($this->oauth_version.' is not a supported version of the OAuth protocol'));\n\t\t}\n\t\treturn(true);\n\t}\n/*\n{metadocument}\n\t\t</do>\n\t</function>\n{/metadocument}\n*/\n\n/*\n{metadocument}\n\t<function>\n\t\t<name>Finalize</name>\n\t\t<type>BOOLEAN</type>\n\t\t<documentation>\n\t\t\t<purpose>Cleanup any resources that may have been used during the\n\t\t\t\tOAuth protocol processing or execution of API calls.</purpose>\n\t\t\t<usage>Always call this function as the last step after calling the\n\t\t\t\tfunctions <functionlink>Process</functionlink> or\n\t\t\t\t<functionlink>CallAPI</functionlink>.</usage>\n\t\t\t<returnvalue>This function returns <booleanvalue>1</booleanvalue> if\n\t\t\t\tthe function cleaned up any resources successfully.</returnvalue>\n\t\t</documentation>\n\t\t<argument>\n\t\t\t<name>success</name>\n\t\t\t<type>BOOLEAN</type>\n\t\t\t<documentation>\n\t\t\t\t<purpose>Pass the last success state returned by the class or any\n\t\t\t\t\texternal code processing the class function results.</purpose>\n\t\t\t</documentation>\n\t\t</argument>\n\t\t<do>\n{/metadocument}\n*/\n\tFunction Finalize($success)\n\t{\n\t\treturn($success);\n\t}\n/*\n{metadocument}\n\t\t</do>\n\t</function>\n{/metadocument}\n*/\n\n/*\n{metadocument}\n\t<function>\n\t\t<name>Output</name>\n\t\t<type>VOID</type>\n\t\t<documentation>\n\t\t\t<purpose>Display the results of the OAuth protocol processing.</purpose>\n\t\t\t<usage>Only call this function if you are debugging the OAuth\n\t\t\t\tauthorization process and you need to view what was its\n\t\t\t\tresults.</usage>\n\t\t</documentation>\n\t\t<do>\n{/metadocument}\n*/\n\tFunction Output()\n\t{\n\t\tif(strlen($this->authorization_error)\n\t\t|| strlen($this->access_token_error)\n\t\t|| strlen($this->access_token))\n\t\t{\n?>\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n<html>\n<head>\n<title>OAuth client result</title>\n</head>\n<body>\n<h1>OAuth client result</h1>\n<?php\n\t\t\tif(strlen($this->authorization_error))\n\t\t\t{\n?>\n<p>It was not possible to authorize the application.<?php\n\t\t\t\tif($this->debug)\n\t\t\t\t{\n?>\n<br>Authorization error: <?php echo HtmlSpecialChars($this->authorization_error);\n\t\t\t\t}\n?></p>\n<?php\n\t\t\t}\n\t\t\telseif(strlen($this->access_token_error))\n\t\t\t{\n?>\n<p>It was not possible to use the application access token.\n<?php\n\t\t\t\tif($this->debug)\n\t\t\t\t{\n?>\n<br>Error: <?php echo HtmlSpecialChars($this->access_token_error);\n\t\t\t\t}\n?></p>\n<?php\n\t\t\t}\n\t\t\telseif(strlen($this->access_token))\n\t\t\t{\n?>\n<p>The application authorization was obtained successfully.\n<?php\n\t\t\t\tif($this->debug)\n\t\t\t\t{\n?>\n<br>Access token: <?php echo HtmlSpecialChars($this->access_token);\n\t\t\t\t\tif(IsSet($this->access_token_secret))\n\t\t\t\t\t{\n?>\n<br>Access token secret: <?php echo HtmlSpecialChars($this->access_token_secret);\n\t\t\t\t\t}\n\t\t\t\t}\n?></p>\n<?php\n\t\t\t\tif(strlen($this->access_token_expiry))\n\t\t\t\t{\n?>\n<p>Access token expiry: <?php echo $this->access_token_expiry; ?> UTC</p>\n<?php\n\t\t\t\t}\n\t\t\t}\n?>\n</body>\n</html>\n<?php\n\t\t}\n\t}\n/*\n{metadocument}\n\t\t</do>\n\t</function>\n{/metadocument}\n*/\n\n};\n\n/*\n\n{metadocument}\n</class>\n{/metadocument}\n\n*/\n\n?>"]],"start1":0,"start2":0,"length1":0,"length2":56426}]],"length":56426}

{"ts":1357413437248,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php if( ! defined( 'BASEPATH' ) ) exit( 'No direct script access allowed' );\n\n/* Explain Views & Controllers organization :\n  \n  Every Controller loads a common index.php which loads a specific\n  page ( home.php , splash.php , callback.php , connect.php ...) \n  which also loads specifc components ( sign-up.php , login.php , feed.php , settings.php ... )\n  among with the page specific includes ( header.php , footer.php ) \n  \n*/\n\nclass Home extends CI_Controller {\n\n  /* \n  * define the page url  \n  */\n  private static $page_url = \"/home\";  \n\n\tfunction __construct() {\n\t\n\t\tparent::__construct();\n\t\t\n\t\t$this->_logged_in();\n\t\t\n\t\t$this->load->model( 'User' , '' , TRUE );\n\t\t\n\t\t$this->load->model( 'Pager' , '' , FALSE );\n    $this->load->model( 'Components' , '' , FALSE );\n    \n    $this->Pager->init( 'home' );\n\t}\n\t\n\t\n    \tprivate function _logged_in() {\n      \t\t\t\n    \t\tif( !$this->session->userdata( 'logged_in' ) ) {\n    \t\t  header( 'location: /login' );\n    \t\t  exit();\n    \t\t}\n    \t}\n\t\n\t\n\t\n\t\n\t\n  /*\n   * the index() acts like a router\n   * the user never stays on it so it doesn't have a view\n  */\n  public function index() {\t\n      \n\t\t  //default redirect to feed\n\t\t  redirect( self::$page_url . \"/feed\" );\n\t\t  \n\t}\n\t\n\t\n\n\t/* ****************************************************\t\n  \t Everything below this point is actually a COMPONENT \n\t\n    **************************************************** */\n\t\n\t\n\t\n\t\n\t\n /* \n  * SETTINGS component \n  */\n  public function settings() {\n    \n    //  define the component\n  \t$this->Components->init( 'settings' );\n  \t\n  \t$this->load->view( 'index' );\n\t}  \n\t\n\t\n\t\n\t\n  public function feed() {\n\t   \n    //  define the component\n    $this->Components->init( 'feed' );\t\n    \n    $this->load->view( 'index' );\n  \n  }\n\t\n /* \n\t* FEED component \n\t*/\n\tpublic function _feed() {\n\t   \n\t  /* initiate the component */ \n    $this->Components->init( 'feed' );\t\n    \n    $this->load->view( 'index' );\n    \n    return;\n  \t\n  \t$data[ 'logged_in' ] = 'logged_in';\n  \t\n  \t$this->logged_in();\n  \t\n  \t$data['posts'] = \"\";\n\t\t\n\t\t//load the Posts model\n\t\t$this->load->model( 'Posts' , '' , false );\n\t\t\n\t\t$this->Posts->set_user( $this->session->userdata['logged_in']['user_id'] );\n\t\t\n\t\t//load the Services model\n\t\t$this->load->model( 'Services' , '' , false );\n\t\t\n\t\t$data[ 'services' ] = $this->Services->get_services();\n\n\t\t//load the Access model\n\t\t$this->load->model( 'Access' , '' , false );\n\t\t$this->Access->initialize( $this->session->userdata[ 'logged_in' ][ 'user_id' ] );\n\t\t\n\t\t\n\t\t$data[ 'active_services' ] = $this->Access->get_active_accesses();\n\t\t\n\t\t//check the services against the active_services and write a \n\t\t// status='active' if the same\n\t\t//not sure if the best solution\n\t\tif( $data['active_services'] ) {\t\n\t\t\n\t\t  foreach ( $data['services'] as $service ) {\n\n\t\t\t\tforeach ( $data['active_services'] as $active_service )\t{\n\t\t\t\t\t\n\t\t\t\t\tif ( $active_service->service_id == $service->service_id )\n\t\t\t\t\t\t  $service->status = \"active\";\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//GETTING\n\t\t\t\t\n\t\t//see the posts specifc to the service only\n\t\t\n\t\tif( isset( $_REQUEST['service'] ) ) {\n\t\t\t\n\t\t\t$service_name = $_REQUEST['service'];\n\t\t\t\t\t\t\t\n\t\t\t$service_id = $this->Services->get_service_id( $service_name );\n\t\t\t\t\t\t\t\n\t\t\t$this->Posts->set_service( $service_name , $service_id );\n\t\t\t\n\t\t\tif( isset( $_REQUEST['method'] ) ) {\n\t\t\t\n\t\t\t\t$method = $_REQUEST['method']; \n\t\t\t\t\n\t\t\t\tswitch( $method ) {\n\t\t\t\t\t\n\t\t\t\t\tcase 'GET_LIVE': \n\t\t\t\t\t\t//see the live posts \n\t\t\t\t\t\t// can be seen only if the service is true\n\t\t\t\t\t\t//( can only be seen specifcally not all of them at once )\n\t\t\t\t\t\t\n\t\t\t\t\t\t$access = json_decode( $this->Access->get_access( $service_id ) );\n\t\t\t\t\t\t\n\t\t\t\t\t\t//load the Connect model\n\t\t\t\t\t\t$this->load->model( 'Connect', '', false );\t\t\t\t\t\n\t\t\t\t\t\t$this->Connect->initialize( $service_name , $access );\n\t\t\t\t\t\t\n\t\t\t\t\t\t//get the posts\n\t\t\t\t\t\t//format the posts\n\t\t\t\t\t\t$data['posts'] = $this->Posts->format_posts( $this->Connect->get_live_posts() ); \n\n\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t//store the live posts \n\t\t\t\t\t\t// can be seen only if the service is true\n\t\t\t\t\t\t//( can only be seen specifcally not all of them at once )\n\t\t\t\t\t\tif( isset( $_REQUEST['store_posts'] ) && $_REQUEST['store_posts'] == 'true' ) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t$this->Posts->set_service( $service_name , $service_id );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//set access_status\n\t\t\t\t\t\t\t$this->Access->set_access( $service_id , false  , 'active' );\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//insert the posts\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//get the last inserted post\n\t\t\t\t\t\t\t$since_id = ( $this->Posts->get_last_post( false , 'post_foreign_id' ) );\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif( $since_id ) {\n\t\t\t\t\t\t\t\t$since_id = $this->Posts->unformat_foreign_id( $since_id[0]->post_foreign_id ); \n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//ge the maximum id to insert\n\t\t\t\t\t\t\t//not used yet\n\t\t\t\t\t\t\t$max_id = false;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t$data['posts'] = Util::reverse( $this->Posts->format_posts( $this->Connect->get_live_posts( array ( 'since_id' => $since_id , 'max_id' => $max_id ) ) ) ); \n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//check if we have posts\n\t\t\t\t\t\t\t//and spit an error if NOT or if it didn't insert it\n\t\t\t\t\t\t\t//or redirect otherwise\n\t\t\t\t\t\t\tif( !$data['posts'] ) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t$data['posts'] = new StdClass();\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t$data['posts']->error = true;\n\t\t\t\t\t\t\t\t$data['posts']->error_msg = \"There are no posts in this range to be inserted\";\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t} elseif( !$this->Posts->insert_posts( $data['posts'] ) ) {\t\t\n\t\t\t\t\t\t\t\t$data['posts'] = new StdClass();\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t$data['posts']->error = true;\n\t\t\t\t\t\t\t\t$data['posts']->error_msg = \"The posts were not inserted\";\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tredirect ( base_url() );\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\n\t\t\t\t\tcase 'AUTH' :\n\t\t\t\t\t\t//load the Connect model\n\t\t\t\t\t\t$this->load->model( 'Connect', '', false );\n\t\t\t\t\t\t\n\t\t\t\t\t\t$this->Connect->initialize( $service_name , json_decode( $this->Services->get_service_data( $service_id )->app_config ) );\n\t\t\t\t\t\t\n\t\t\t\t\t\t$this->Connect->auth(); \n\t\t\t\t\tbreak; \n\t\t\t\t\t\n\t\t\t\t}// <-- end switch\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\n\t\t\t\t//get the posts\n\t\t\t\t$data['posts'] = $this->Posts->get_posts();\n\t\t\t\t\n\t\t\t}\n\t\t} else {\n\t\t\n\t\t\t//get the posts\n\t\t\t$data['posts'] = $this->Posts->get_posts( 1000 );\t\n\t\t\t\n\t\t}// <-- end if isset( service\n\t\t\n\t   \t$this->load->view( 'index' );\t\n\t}\n\t\n\t\n\t\n\t//this should be a method in a helper or something\n\tpublic function logout() {\n\t\n\t\t$this->session->unset_userdata( 'logged_in' );\n\t\t\n\t\theader( 'location: /' );\n\t\texit();\t\t\n\t}\n\t\n}"]],"start1":0,"start2":0,"length1":0,"length2":6393}]],"length":6393}

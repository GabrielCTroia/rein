{"ts":1357413609376,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');\n\n/* Explain Views & Controllers organization :\n  \n  Every Controller loads a common index.php which loads a specific\n  page ( home.php , splash.php , callback.php , connect.php ...) \n  which also loads specifc components ( sign-up.php , login.php , feed.php , settings.php ... )\n  among with the page specific includes ( header.php , footer.php ) \n  \n  \n  {Ghost} Component = A component which doesn't have a view assgined to it\n                      It mostly only redirects you to another URL where you actually load a view\n                      The difference between a Ghost Component and a method is that you actually use it as a URL \n*/\n\n\n\nclass Init extends CI_Controller {\n\n /* \n  * define the page url  \n  */\n  private static $page_url = \"/init\";  \n  \n  \n /* \n  * define the $data that will be passed to the view  \n  */\n  private static $data = array();\n  \n  \n  \n\n  function __construct() {\n\t \n   /* \n    * load the parent construct \n    */  \n    parent::__construct();\n\t\t\n\t\t//  We are storing the Page and Components object as classes inside models\n\t\t//  because we want to be able to access them from anywhere within the controller\n\t\t//  instead of redefining a new variable for it everysingle time\n    $this->load->model( 'Pager' , '' , FALSE );\n    $this->load->model( 'Components' , '' , FALSE );\n    \n    //  At the time of writing this, both models are identical, so they accept a single\n    //  $name variable which automatically generates $name/$path/$url inside the init function\n    $this->Pager->init( 'init' );\n      \n\t}\n  \n  \n  \n  \n  \n  \n  /*\n   * the index() acts like a router\n   * the user never stays on it so it doesn't have a view\n  */\n\tpublic function index() {\t\n\t\t\n\t\tif( !$this->session->userdata( 'logged_in' ) ) {\n      \n      /*\n      if we just call the self::method instead of redirect() than the url is not gonna' be changed\n      it may be usefull in some cases but for now I wanna' stick with this\n      */\n      \n      //  load splah page\n      redirect( self::$page_url . '/splash' );\n            \t\t\t\t\t\t\t\t\n\t\t} else\n\t\t  redirect( 'home' );\n\t\t  \n\t}\n\t\n\n\t\n\t/* ****************************************************\t\n  \t Everything below this point is actually a COMPONENT \n\t\n    **************************************************** */\n\t\n\t\n\t\n\t\n /* \n  * SPLASH component\n  */\n  public function splash() {\n\n    //  define the component\t  \n  \t$this->Components->init( 'splash' );\n  \t\n  \t$this->load->view( 'index.php' );\n  \t\n\t}\n\t\n\t\n\t\n\t\n\t\n\t\n /*\n  * SIGNUP component\n  */\n\tpublic function signup() {\t\n  \t\n\t\t/* \n\t\t * check one more time if the user exists in the session and fallback to index() if NOT\n\t\t */\t\n\t\tif( $this->session->userdata( 'logged_in' ) ) { \n\t\t  \n\t\t  //if the user is in the session then index() is gonna' redirect it wherever it needs ( home.php )\n  \t\tredirect( self::$page_url );\n\t\t\n\t\t}\n    \n    /* ElSE */\n\n    //  define the component\n    $this->Components->init( 'signup' );\n    \n    \n    /* \n    load the helpers   \n    */\n\t  $this->load->helper( 'form' );\n\t  $this->load->library( 'form_validation' );\n\t  \n\t  $this->form_validation->set_rules( \n\t   \n\t     array(\n\t        array(\n\t              'field' => 'user_name',\n\t              'label' => 'User Name',\n\t              'rules' => 'trim|required|min_length[5]|max_length[30]|is_unique[users.user_name]'\n\t        ),\n\t        array(\n\t              'field' => 'email',\n\t              'label' => 'Email',\n\t              'rules' => 'trim|required|valid_email|is_unique[users.email]'\n\t        ),\n\t        array(\n\t              'field' => 'password',\n\t              'label' => 'Password',\n\t              'rules' => 'required|matches[password_confirm]|md5'\n\t        ),\n\t        array(\n\t              'field' => 'password_confirm',\n\t              'label' => 'Password Confirmation',\n\t              'rules' => 'required'\n\t        )\n\t     ) \n\t     \n\t   );\n\t      \n\t  $this->form_validation->set_error_delimiters( '<div class=\"error\">' , '</div>' );\n\t  \n\t      \n\t  if( $this->form_validation->run() ) {\n\t\t  \n\t\t  $this->load->model( 'User' , '' , TRUE );\n\t\t  \n\t\t  //  register a new user to the database and return his unique user_id\n\t\t  $user_id = $this->User->register_user( $this->input->post() );\n\t\t  \n\t\t  \n\t\t  $this->load->library('session');\n\t\t  \n\t\t  $this->session->set_userdata(\n\t\t      array(\n\t\t        'logged_in' => TRUE,\n\t\t        'user_id' => $user_id,\n\t\t        'tutorial' => TRUE,\n\t\t        'message' => 'Congratulations on signing up!'\n\t\t      )\n\t\t  );\n\t\t  \n\t\t  //  Marius: If it does that, then how will it know if the user just registered.\n\t\t  //  Eventually we're going to need to have some tutorials or hints for first time users + we need\n\t\t  //  to get them connected with social media networks. I get where you're coming from but it's a \n\t\t  //  short term solution.\n\t\t  \n\t\t  /* Redirects to home  */\n\t\t  redirect( '/home/settings' );\n      \n      \n\t\t  \n\t\t}\t\n\n\t\t$this->load->view( 'index.php' );\n\t\n\t}\n\t\n\t\n\t\n\t\n /*\n  * LOGIN component\n  */\n\tpublic function login() {\t\n\t\n    /* \n\t\t * check one more time if the user exists in the session and fallback to index() if NOT\n\t\t * OR if the enetered credentials are good and log him in if YES\n\t\t */\t\n\t\tif( $this->session->userdata( 'logged_in' ) || self:: _verifylogin() ) { \n\t\t  \n\t   /*\n\t\t  *if the user is in the session OR he entered valid credentials \n\t    *then index() is gonna' redirect it wherever it needs ( home.php )\n\t    */\n  \t\tredirect( self::$page_url );\n\t\t\n\t\t}\n    \n    /* ELSE  */\n    \n    //  define the component\n    $this->Components->init( 'login' );\t\n          \n    //load the FORM helper\n    $this->load->helper('form');\t\t\n\t\t\n    $this->load->view('index.php');\t\t      \n\n\t}\n\t\n\t\n\n\t  /* \n\t   * called by self::login() \n\t   *\n\t   * TO DO - add the ability to login with the EMAIL too\n\t   */\n  \tprivate function _verifylogin() {\t\n \n      /* load the User model */\n    \t$this->load->model('User','',false);\n    \t\n    \t/* load the credential validation library */\n  \t\t$this->load->library( 'form_validation' );\n  \t\t\n  \t\t/* set the rules */\n      $this->form_validation->set_rules(\n      \n        array(\n  \t       array(\n  \t              'field' => 'user_name',\n  \t              'label' => 'User Name',\n  \t              'rules' => 'trim|required|xss_clean'\n  \t        ),\n  \t        \n  \t        array(\n  \t              'field' => 'password',\n  \t              'label' => 'Password',\n  \t              'rules' => 'trim|required|xss_clean|callback__check_db'\n  \t        )\n  \t     )     \n  \t        \n  \t   );       \n\n  \t   \n  \t\tif( $this->form_validation->run() ){\n        \n        /* cache the inputs */  \n        $user_name = $this->input->post('user_name');\n        $password  = $this->input->post('password');  \n        \n        /* retriev ethe USER_INFO */          \n  \t\t  $user_info = User::validate_login( array( \"user_name\" => $user_name , \"password\" => $password ) , true );\n        \n        /* and store in the SESSION */                      \t\t\t\t\t\n  \t\t\t$this->session->set_userdata( 'logged_in' , $user_info );\n  \t\t\t\n  \t\t\treturn true;\n  \t\n  \t\t} \n\t\t  return false;    \t\n  \t}\n\t\n    \t/* \n    \t * called by self::verifylogin(); \n    \t*/\n    \tpublic function _check_db( $password ) {      \t\n        \n        /* cache the inputs */\n        $user_name = $this->input->post('user_name');\n        \n        return User::validate_login( array( \"user_name\" => $user_name , \"password\" => $password ) );\t\n      \t\n    \t}\n\t\n\t\n\t\n /*\n  * SIGNOUT - Ghost Component\n  */\n\tpublic function signout() {\t\n\t\n    /* \n\t\t * check if the user doens't exist in the session and fallback to index() if YES\n\t\t */\t\n\t\tif( !$this->session->userdata( 'logged_in' ) ) { \n\t\t  \n\t\t  //if the user is in the session then index() is gonna' redirect it wherever it needs ( home.php )\n  \t\tredirect( self::$page_url );\n\t\t\n\t\t}\n    \n    /* ElSE */\t\n\t\t\n\t\t$this->session->unset_userdata('logged_in');\n\t\t\n\t\t//for some reason the session id is not instantiated\n    /* if( session_id() ) session_destroy(); */\n\t\t\n\t\t$this->session->sess_destroy();\n\n\t\tredirect( self::$page_url );\n\t\n\t}\n\t\n\t\n}\t\n\n/* End of file init.php */\n/* Location: ./application/controllers/init.php */"]],"start1":0,"start2":0,"length1":0,"length2":8166}]],"length":8166}
{"contributors":[],"silentsave":true,"ts":1357414160829,"patch":[[{"diffs":[[0,"\n      \n"],[-1,"\t"],[0,"}\n  \n  \n"]],"start1":1607,"start2":1607,"length1":17,"length2":16}]],"length":8165,"saved":false}
{"ts":1357414162415,"patch":[[{"diffs":[[0,"\n      \n"],[1,"\t"],[0,"}\n  \n  \n"]],"start1":1607,"start2":1607,"length1":16,"length2":17}]],"length":8166,"saved":false}
